Page Object Model (POM) is a design pattern, popularly used in test automation that creates Object(functions,variables)
 Repository for web UI elements. The advantage of the model is that it reduces code duplication and improves test
 maintenance.

Under this model, for each web page in the application, there should be a corresponding Page Class.
This Page class will identify the WebElements of that web page and also contains Page methods which perform operations
on those WebElements. Name of these methods should be given as per the task they are performing, i.e.,
if a loader is waiting for the payment gateway to appear, POM method name can be waitForPaymentScreenDisplay().

Script maintenance looks easy. But with time test suite will grow. As you add more and more lines to your code,
things become tough.

The chief problem with script maintenance is that if 10 different scripts are using the same page element,
with any change in that element, you need to change all 10 scripts. This is time consuming and error prone.

A better approach to script maintenance is to create a separate class file which would find web elements,
fill them or verify them. This class can be reused in all the scripts using that element. In future,
if there is a change in the web element, we need to make the change in just 1 class file and not 10 different scripts.

This approach is called Page Object Model(POM). It helps make the code more readable, maintainable, and reusable.